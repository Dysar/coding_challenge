// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "challenge/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// PackService is an autogenerated mock type for the PackService type
type PackService struct {
	mock.Mock
}

// CalculatePacks provides a mock function with given fields: orderQuantity
func (_m *PackService) CalculatePacks(orderQuantity int) ([]model.PackDetails, error) {
	ret := _m.Called(orderQuantity)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePacks")
	}

	var r0 []model.PackDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.PackDetails, error)); ok {
		return rf(orderQuantity)
	}
	if rf, ok := ret.Get(0).(func(int) []model.PackDetails); ok {
		r0 = rf(orderQuantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PackDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(orderQuantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPackSizes provides a mock function with given fields:
func (_m *PackService) ReadPackSizes() []int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadPackSizes")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// UpdatePackSizes provides a mock function with given fields: packSizes
func (_m *PackService) UpdatePackSizes(packSizes []int) {
	_m.Called(packSizes)
}

// NewPackService creates a new instance of PackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackService {
	mock := &PackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
